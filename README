# Orc_π Calculus: Prototype and Evaluation Data

This repository contains the Python prototype and evaluation data for the paper "Orc_π Calculus: A Formal Framework for Web Services Choreography with Semantics and Projection," submitted to the *Journal of Computer Languages*. The prototype implements the \(\text{Orc}_\pi\) Calculus for simulating Web services and IoT choreographies, and the evaluation data includes traces and metrics for case studies \( C_{\text{ecomm}} \) and \( C_{\text{IoT}} \).

## Prototype Setup Instructions

### Prerequisites
- **Python**: 3.8 or higher
- **Dependencies**: Listed in `prototype/src/requirements.txt`
  - Paho-MQTT 1.6.1 (`pip install paho-mqtt==1.6.1`)
  - CoAPthon 4.0.2 (`pip install coapthon==4.0.2`)
- **Operating System**: Linux, macOS, or Windows
- **Hardware**: Minimum 4 GB RAM, 2 GHz CPU (recommended: 16 GB RAM, 2.4 GHz multi-core CPU for large-scale simulations)

### Installation
1. Clone the repository:
   ```bash
   git clone https://github.com/isaacyang-2025/orcpi-calculus.git
   cd orcpi-calculus
   
2. Navigate to the prototype directory:
    cd prototype
    
3. Install dependencies:
   pip install -r src/requirements.txt

4. Verify installation:
python src/orcpi_calculus.py --test

Running Simulations

Run ( C_{\text{ecomm}} ) simulation:
python src/simulation.py --choreography cecomm --roles 4 --interactions 100 --runs 1000

Run ( C_{\text{IoT}} ) simulation:
python src/simulation.py --choreography ciot --roles 5 --interactions 100 --runs 1000

Batch execution:
bash run_simulation.sh

Testing
Unit tests for ( C_{\text{ecomm}} ) and ( C_{\text{IoT}} ) are located in prototype/tests/:
python -m unittest tests/test_cecomm.py
python -m unittest tests/test_ciot.py

Data Format

traces.csv:

Columns: run_id, trace, timestamp
Example:
run_id,trace,timestamp
1,"[c_1,c_2,c_3,c_4]",2025-08-01T12:00:00
2,"[c_1,c_3,c_2,c_4]",2025-08-01T12:00:01

metrics.csv:

Columns: run_id, configuration, roles, interactions, runtime_ms, memory_mb, message_count, success_rate, deadlock_rate
Example:
run_id,configuration,roles,interactions,runtime_ms,memory_mb,message_count,success_rate,deadlock_rate
1,Baseline,4,100,9.0,15.2,8,1.0,0.0
2,Optimized,4,100,7.0,12.8,6,1.0,0.0

Reproducing Results
To reproduce the evaluation results (Section 5):

1. Run simulations as described above.
2. Aggregate results using:
python src/simulation.py --aggregate evaluation_data/cecomm/metrics.csv
3. Compare with Tables \ref{tab:ecomm_metrics}, \ref{tab:iot_metrics}, and Figures \ref{fig:case_study_runtime}, \ref{fig:method_comparison}.

Contact
For issues or access requests, contact yangchang.name@gmail.com.
